@using VehicleRouting.Models;
@model SolverResultViewModel

<style>
    .map {
        height: 500px;
        width: 100%;
    }
</style>
<div class="row">
    <div>
        <h2>Vehicle routing problem</h2>
        <p>These are the results!</p>
    </div>
</div>

<div id="map" class="map">
    <script src="~/Scripts/OpenLayers/ol.js">
    </script>
    <link rel="stylesheet" href="~/Scripts/OpenLayers/ol.css" type="text/css">
    <script src="~/Scripts/OpenLayersExtensions/mapHandling.js" type="module">
    </script>
    <script>
        var vehicles = [];
        var pointsOfDelivery = [];
        var results = [];
        @{
            var index = 0;
        }

        @foreach (Vehicle vehicle in Model.LocationsViewModel.Vehicles)
        {
            @:vehicles.push([@vehicle.SpawnPointX, @vehicle.SpawnPointY]);
                }

        @foreach (PointOfDelivery pointOfDelivery in Model.LocationsViewModel.PointsOfDelivery)
        {
            @:pointsOfDelivery.push([@pointOfDelivery.CoordX, @pointOfDelivery.CoordY]);
                }

        @foreach (List<ValueTuple<float, float>> algorithmResultValue in Model.AlgorithmResult.Values)
        {
            @:results[@index] = [];
            foreach (ValueTuple<float, float> value in algorithmResultValue)
            {
                 @:results[@index].push([@value.Item1, @value.Item2]);
            }
            index = index + 1;
        }

        showResults(vehicles, pointsOfDelivery, results);
    </script>
</div>
<div id="details">
    @foreach (int vehicleID in Model.AlgorithmResult.Keys)
    {
        <div>
            @(Model.LocationsViewModel.Vehicles.First(v=>v.ID == vehicleID).Name) 
            <br/>
            @foreach(ValueTuple<float, float> tuple in Model.AlgorithmResult[vehicleID])
            {
                @(tuple.Item1)
                @Html.Raw(", ")
                @(tuple.Item2)
                @Html.Raw(" => ")
            }
            <br/>
        </div>
    }
</div>