@using VehicleRouting.Models;
@model SolverResultViewModel

<style>
    .map {
        height: 500px;
        width: 100%;
    }
</style>
<div class="row">
    <div>
        <h2>Vehicle routing problem</h2>
        <p>These are the results!</p>
    </div>
</div>

<div id="map" class="map">
    <script src="~/Scripts/OpenLayers/ol.js">
    </script>
    <link rel="stylesheet" href="~/Scripts/OpenLayers/ol.css" type="text/css">
    <script src="~/Scripts/OpenLayersExtensions/mapHandling.js" type="module">
    </script>
    <script>
        var vehicles = [];
        var pointsOfDelivery = [];
        var results = {};

        @foreach (Vehicle vehicle in Model.LocationsViewModel.Vehicles)
        {
            @:vehicles.push([@vehicle.SpawnPointX, @vehicle.SpawnPointY]);
        }

        @foreach (PointOfDelivery pointOfDelivery in Model.LocationsViewModel.PointsOfDelivery)
        {
            @:pointsOfDelivery.push([@pointOfDelivery.CoordX, @pointOfDelivery.CoordY]);
        }

        @foreach (int vehicleID in Model.AlgorithmResult.Keys)
        {
            @:var list = [];

            foreach (ValueTuple<float, float> value in Model.AlgorithmResult[vehicleID])
            {
                 @:list.push([@value.Item1, @value.Item2]);
            }
            @:results[@vehicleID] = list;
        }

        showResults(vehicles, pointsOfDelivery, results);
    </script>
</div>
<div id="details">
    <p>Click on one of the following boxes in order to select the route/routes you want to see.</p>
    <div id="getAll" onclick="getAllLayers()" class="panel panel-default">
        <p>GET ALL LAYERS</p>
    </div>
    @foreach (int vehicleID in Model.AlgorithmResult.Keys)
    {
        <div id="@("vehicle" + vehicleID)" onclick="getSeperateLayer(@vehicleID)" class="panel panel-default">
            @(Model.LocationsViewModel.Vehicles.First(v => v.ID == vehicleID).Name)
            <br/>
            @{
                int i;
            }
            @for (i = 0; i < Model.AlgorithmResult[vehicleID].Count - 1; i++)
            {
                var tuple = Model.AlgorithmResult[vehicleID][i];
                @(tuple.Item1)
                @Html.Raw(", ")
                @(tuple.Item2)
                @Html.Raw(" => ")
            }
            @{
                var lastTuple = Model.AlgorithmResult[vehicleID][i];
            }
            @lastTuple.Item1, @lastTuple.Item2
            <br/>
            Time: @Model.TimeAndDistance[vehicleID].Item1 seconds
            <br />
            Distance: @Model.TimeAndDistance[vehicleID].Item2 meters
            <br/>
        </div>
    }
</div>